1.1 Command

> Get-ChildItem: -

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
da---l         11-Jan-21  11:11 AM                shell_magic

It shows both the time and the date when I first "edit" in the folder. I assumed that "Mode" is showing the file type.
Since it's a folder, it is showing da---1. 

Get-ChildItem some_folder: - 

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---l         11-Jan-21  11:11 AM              0 shell_assignment.txt

The length of the characters in the .txt file is shown in the length. The mode for this data is -a---1.
It could mean that -a---1 is defined for .txt file. 

> Get-Alias ls: - 

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           ls -> Get-ChildItem

They have command type and Name. So Get-Alias is the command to get information the alias. 
An alias following after that command is meant for the Powershell to show information about that particular alias.
Just typing Get-Alias gives me a list of alias.   
ls is regarded as an alias for Get-ChildItem. 

1.2 Getting Some Help

> Get-Help Remove-Item: - 

It shows only partial help. There are aliases stated.  
After updating help, it becomes more detailed with a description which explains how it works. 
There is a remark for further explanation on the Remove-Item, including get-help Remove-Item -detailed. 

> Get-Help Remove-Item - detailed: - 

Examples for how to use the Remove-Item in a directory is stated, along with more specification on its syntax. 

Using 
> Get-ChildItem some_folder* -Include * .txt 
returns the file with a .txt file. 

Using 
> ls *.txt -Recurse -Force 
give me the files with .txt file. It does not show the folder anymore. 
I use 
> ls -Recurse -Force 
before and it listed down both the folders and the files in them. 

2.1 Looking around

My current working directory is:-
> C:\Users\eaind\OneDrive\Documents\Lab courses\Week2\shell_magic
I do not see any colors. Maybe it is due to the fact that all of them are folders that they are displaying the same colors. 

The working directory moved a folder back when using sl.. :-
> C:\Users\eaind\OneDrive\Documents\Lab courses\Week2

I used the same command sl. I type in the name of the folder to specify it. 
> C:\Users\eaind\OneDrive\Documents\Lab courses> sl Week2\shell_magic

3.1 Creating an empty file

Using
> ni hello world
gives me error. It is said that there is no argument that accepts world. So it probably is better to name it hello_world. 
It worked afterwards.

3.2 Making directories

The command used:
> ni -ItemType directory
Then the name of the folder. 

3.3 Moving and renaming files

It does not work because there is a file with the same name. 
While renaming the item, I use 
> rni hello_world.bfe
Then set the new name. 

> mi hello_world.txt hello_world
The specification of the file name, then the destination that I wanted to move it to have to be specified. 

I set the directory to hello_world. Then use:
> mi hello_world.txt ..
> mi ..\hello_world.txt .

3.4 Copying files
> cp ..\hello_world.txt .
> rni .\hello_world.txt

3.5 Removing files and directories

> rm hello_world.txt
> rm hello_world\world_hello.txt

That it is an NTFS junction point. 
> rm hello_world -Force

4.1 Displaying file contents

Nothing could be seen because there is nothing in the content. 

4.2 Redirecting standard output with > and >>

Command: echo 'file contents' > file.txt
Command: echo "New lines" >> file.txt

4.3 Prevent cluttering your terminal

> sl ..
> sl home directory
Command: ls -recurse -name >home_contents.list
> mi home_contents.list ..\Week2\shell_magic

When using gc on the whole content list, everything comes out which is inconvenient. 
Using 
gc home_content.list | oh -p 
is much more compact. 

5.1 Pipe Symbol

> gc file.txt|measure-object

First, they tried to get the content from the file; then it measures the content of it. It only shows the number of lines in the text though. 
Likewise with |oh -p. They first get to read the contents in the list. 
Then by using the second command for seeing less, the page shows less than when using gc. 

> gc .\home_content.list|measure-object
There are 17553 files. 

5.2 Patterns. 

ni helloworld.txt
echo "Hello world" > .\helloworld.txt
echo "world hello" >> .\helloworld.txt

sls "world" .\helloworld.txt
Result: 
helloworld.txt:1:Hello world
helloworld.txt:2:world hello
It specifies the files at which it found the words as well.

sls "hello"
Then specify at which paths I want to look the word into: - 
cmdlet Select-String at command pipeline position 1
Supply values for the following parameters:
Path[0]: worldhello.txt
Path[1]: helloworld.txt

Result:
worldhello.txt:1:world hello
helloworld.txt:1:Hello world
helloworld.txt:2:world hello

5.3 Daisy-Chaining the Commands you've learned

Commands:
sls "hello" helloworld.txt

gc .\helloworld.txt | sls "world" |measure-object | oh -p

6.2 Unpacking Archives

Command: tar.exe -xf .\aup.tar.gz

6.3 Exploring your data

Command: ls -Filter * .\aup\

Command: \aup\cohort1\s003f\s003f.aup	

Command: ls .\s003f\s003f.aup |oh -p

Command: ls aup -recurse -name > aup.list
Command: gc aup.list | sls .aup |measure-object
There are 964 .aup files in the aup folder. 

6.4 Using regular expression to grep/sls like a Ninja

Command: ls -Filter * .\aup\cohort3 | sls .aup| measure-object
There are 320 .aup files in the cohort 3 folder. 

Command: ls -Filter * .\aup\cohort1 | ls -recurse -name| sls .aup| measure-object
There are 318 .aup files in the cohort 1 folder.

Command: ls -Filter * .\aup\cohort2 | ls -recurse -name| sls .aup| sls "ssc"| measure-object
There are 86 .aup files for ssc students in the cohort 2 folder. 


